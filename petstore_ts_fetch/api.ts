/* tslint:disable */
/* eslint-disable */
/**
 * ExerciseDB Documentation
 * API documentation app for [ExerciseDB on RapidAPI](https://rapidapi.com/justin-WFnsXH_t6/api/exercisedb)
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Exercise
 */
export interface Exercise {
    /**
     * 
     * @type {string}
     * @memberof Exercise
     */
    'bodyPart': string;
    /**
     * 
     * @type {string}
     * @memberof Exercise
     */
    'equipment': string;
    /**
     * 
     * @type {string}
     * @memberof Exercise
     */
    'gifUrl': string;
    /**
     * 
     * @type {string}
     * @memberof Exercise
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Exercise
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Exercise
     */
    'target': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Exercise
     */
    'secondaryMuscles': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Exercise
     */
    'instructions': Array<string>;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface NotFoundError
 */
export interface NotFoundError {
    /**
     * 
     * @type {string}
     * @memberof NotFoundError
     */
    'code': NotFoundErrorCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotFoundError
     */
    'message': NotFoundErrorMessageEnum;
}

export const NotFoundErrorCodeEnum = {
    NotFound: 'NOT_FOUND'
} as const;

export type NotFoundErrorCodeEnum = typeof NotFoundErrorCodeEnum[keyof typeof NotFoundErrorCodeEnum];
export const NotFoundErrorMessageEnum = {
    ExerciseNotFound: 'Exercise not found'
} as const;

export type NotFoundErrorMessageEnum = typeof NotFoundErrorMessageEnum[keyof typeof NotFoundErrorMessageEnum];


/**
 * ExercisesApi - axios parameter creator
 * @export
 */
export const ExercisesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get list of exercises
         * @param {number} [offset] Offset for exercise list pagination
         * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
         * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
         * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercises: async (offset?: number, limit?: number, sortMethod?: 'bodyPart' | 'equipment' | 'id' | 'name' | 'target', sortOrder?: 'ascending' | 'descending', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/exercises`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sortMethod !== undefined) {
                localVarQueryParameter['sortMethod'] = sortMethod;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of exercises by body part
         * @param {'back' | 'cardio' | 'chest' | 'lower arms' | 'lower legs' | 'neck' | 'shoulders' | 'upper arms' | 'upper legs' | 'waist'} bodyPart Body part
         * @param {number} [offset] Offset for exercise list pagination
         * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
         * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
         * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesBodyPartByBodyPart: async (bodyPart: 'back' | 'cardio' | 'chest' | 'lower arms' | 'lower legs' | 'neck' | 'shoulders' | 'upper arms' | 'upper legs' | 'waist', offset?: number, limit?: number, sortMethod?: 'bodyPart' | 'equipment' | 'id' | 'name' | 'target', sortOrder?: 'ascending' | 'descending', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bodyPart' is not null or undefined
            assertParamExists('getExercisesBodyPartByBodyPart', 'bodyPart', bodyPart)
            const localVarPath = `/exercises/bodyPart/{bodyPart}`
                .replace(`{${"bodyPart"}}`, encodeURIComponent(String(bodyPart)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sortMethod !== undefined) {
                localVarQueryParameter['sortMethod'] = sortMethod;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get list of available body parts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesBodyPartList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/exercises/bodyPartList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of exercises by equipment
         * @param {'assisted' | 'band' | 'barbell' | 'body weight' | 'bosu ball' | 'cable' | 'dumbbell' | 'elliptical machine' | 'ez barbell' | 'hammer' | 'kettlebell' | 'leverage machine' | 'medicine ball' | 'olympic barbell' | 'resistance band' | 'roller' | 'rope' | 'skierg machine' | 'sled machine' | 'smith machine' | 'stability ball' | 'stationary bike' | 'stepmill machine' | 'tire' | 'trap bar' | 'upper body ergometer' | 'weighted' | 'wheel roller'} equipment Equipment type
         * @param {number} [offset] Offset for exercise list pagination
         * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
         * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
         * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesEquipmentByEquipment: async (equipment: 'assisted' | 'band' | 'barbell' | 'body weight' | 'bosu ball' | 'cable' | 'dumbbell' | 'elliptical machine' | 'ez barbell' | 'hammer' | 'kettlebell' | 'leverage machine' | 'medicine ball' | 'olympic barbell' | 'resistance band' | 'roller' | 'rope' | 'skierg machine' | 'sled machine' | 'smith machine' | 'stability ball' | 'stationary bike' | 'stepmill machine' | 'tire' | 'trap bar' | 'upper body ergometer' | 'weighted' | 'wheel roller', offset?: number, limit?: number, sortMethod?: 'bodyPart' | 'equipment' | 'id' | 'name' | 'target', sortOrder?: 'ascending' | 'descending', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'equipment' is not null or undefined
            assertParamExists('getExercisesEquipmentByEquipment', 'equipment', equipment)
            const localVarPath = `/exercises/equipment/{equipment}`
                .replace(`{${"equipment"}}`, encodeURIComponent(String(equipment)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sortMethod !== undefined) {
                localVarQueryParameter['sortMethod'] = sortMethod;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get list of available equipment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesEquipmentList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/exercises/equipmentList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single exercise by its ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesExerciseById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getExercisesExerciseById', 'id', id)
            const localVarPath = `/exercises/exercise/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get list of exercises by name
         * @param {string} name 
         * @param {number} [offset] Offset for exercise list pagination
         * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
         * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
         * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesNameByName: async (name: string, offset?: number, limit?: number, sortMethod?: 'bodyPart' | 'equipment' | 'id' | 'name' | 'target', sortOrder?: 'ascending' | 'descending', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getExercisesNameByName', 'name', name)
            const localVarPath = `/exercises/name/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sortMethod !== undefined) {
                localVarQueryParameter['sortMethod'] = sortMethod;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get list of exercises by target muscle
         * @param {'abductors' | 'abs' | 'adductors' | 'biceps' | 'calves' | 'cardiovascular system' | 'delts' | 'forearms' | 'glutes' | 'hamstrings' | 'lats' | 'levator scapulae' | 'pectorals' | 'quads' | 'serratus anterior' | 'spine' | 'traps' | 'triceps' | 'upper back'} target Target muscle
         * @param {number} [offset] Offset for exercise list pagination
         * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
         * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
         * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesTargetByTarget: async (target: 'abductors' | 'abs' | 'adductors' | 'biceps' | 'calves' | 'cardiovascular system' | 'delts' | 'forearms' | 'glutes' | 'hamstrings' | 'lats' | 'levator scapulae' | 'pectorals' | 'quads' | 'serratus anterior' | 'spine' | 'traps' | 'triceps' | 'upper back', offset?: number, limit?: number, sortMethod?: 'bodyPart' | 'equipment' | 'id' | 'name' | 'target', sortOrder?: 'ascending' | 'descending', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'target' is not null or undefined
            assertParamExists('getExercisesTargetByTarget', 'target', target)
            const localVarPath = `/exercises/target/{target}`
                .replace(`{${"target"}}`, encodeURIComponent(String(target)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sortMethod !== undefined) {
                localVarQueryParameter['sortMethod'] = sortMethod;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get list of available target muscles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesTargetList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/exercises/targetList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExercisesApi - functional programming interface
 * @export
 */
export const ExercisesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExercisesApiAxiosParamCreator(configuration)
    return {
        /**
         * Get list of exercises
         * @param {number} [offset] Offset for exercise list pagination
         * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
         * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
         * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExercises(offset?: number, limit?: number, sortMethod?: 'bodyPart' | 'equipment' | 'id' | 'name' | 'target', sortOrder?: 'ascending' | 'descending', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Exercise>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExercises(offset, limit, sortMethod, sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a list of exercises by body part
         * @param {'back' | 'cardio' | 'chest' | 'lower arms' | 'lower legs' | 'neck' | 'shoulders' | 'upper arms' | 'upper legs' | 'waist'} bodyPart Body part
         * @param {number} [offset] Offset for exercise list pagination
         * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
         * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
         * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExercisesBodyPartByBodyPart(bodyPart: 'back' | 'cardio' | 'chest' | 'lower arms' | 'lower legs' | 'neck' | 'shoulders' | 'upper arms' | 'upper legs' | 'waist', offset?: number, limit?: number, sortMethod?: 'bodyPart' | 'equipment' | 'id' | 'name' | 'target', sortOrder?: 'ascending' | 'descending', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Exercise>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExercisesBodyPartByBodyPart(bodyPart, offset, limit, sortMethod, sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get list of available body parts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExercisesBodyPartList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExercisesBodyPartList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a list of exercises by equipment
         * @param {'assisted' | 'band' | 'barbell' | 'body weight' | 'bosu ball' | 'cable' | 'dumbbell' | 'elliptical machine' | 'ez barbell' | 'hammer' | 'kettlebell' | 'leverage machine' | 'medicine ball' | 'olympic barbell' | 'resistance band' | 'roller' | 'rope' | 'skierg machine' | 'sled machine' | 'smith machine' | 'stability ball' | 'stationary bike' | 'stepmill machine' | 'tire' | 'trap bar' | 'upper body ergometer' | 'weighted' | 'wheel roller'} equipment Equipment type
         * @param {number} [offset] Offset for exercise list pagination
         * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
         * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
         * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExercisesEquipmentByEquipment(equipment: 'assisted' | 'band' | 'barbell' | 'body weight' | 'bosu ball' | 'cable' | 'dumbbell' | 'elliptical machine' | 'ez barbell' | 'hammer' | 'kettlebell' | 'leverage machine' | 'medicine ball' | 'olympic barbell' | 'resistance band' | 'roller' | 'rope' | 'skierg machine' | 'sled machine' | 'smith machine' | 'stability ball' | 'stationary bike' | 'stepmill machine' | 'tire' | 'trap bar' | 'upper body ergometer' | 'weighted' | 'wheel roller', offset?: number, limit?: number, sortMethod?: 'bodyPart' | 'equipment' | 'id' | 'name' | 'target', sortOrder?: 'ascending' | 'descending', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Exercise>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExercisesEquipmentByEquipment(equipment, offset, limit, sortMethod, sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get list of available equipment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExercisesEquipmentList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExercisesEquipmentList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a single exercise by its ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExercisesExerciseById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Exercise>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExercisesExerciseById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get list of exercises by name
         * @param {string} name 
         * @param {number} [offset] Offset for exercise list pagination
         * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
         * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
         * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExercisesNameByName(name: string, offset?: number, limit?: number, sortMethod?: 'bodyPart' | 'equipment' | 'id' | 'name' | 'target', sortOrder?: 'ascending' | 'descending', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Exercise>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExercisesNameByName(name, offset, limit, sortMethod, sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get list of exercises by target muscle
         * @param {'abductors' | 'abs' | 'adductors' | 'biceps' | 'calves' | 'cardiovascular system' | 'delts' | 'forearms' | 'glutes' | 'hamstrings' | 'lats' | 'levator scapulae' | 'pectorals' | 'quads' | 'serratus anterior' | 'spine' | 'traps' | 'triceps' | 'upper back'} target Target muscle
         * @param {number} [offset] Offset for exercise list pagination
         * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
         * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
         * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExercisesTargetByTarget(target: 'abductors' | 'abs' | 'adductors' | 'biceps' | 'calves' | 'cardiovascular system' | 'delts' | 'forearms' | 'glutes' | 'hamstrings' | 'lats' | 'levator scapulae' | 'pectorals' | 'quads' | 'serratus anterior' | 'spine' | 'traps' | 'triceps' | 'upper back', offset?: number, limit?: number, sortMethod?: 'bodyPart' | 'equipment' | 'id' | 'name' | 'target', sortOrder?: 'ascending' | 'descending', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Exercise>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExercisesTargetByTarget(target, offset, limit, sortMethod, sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get list of available target muscles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExercisesTargetList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExercisesTargetList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExercisesApi - factory interface
 * @export
 */
export const ExercisesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExercisesApiFp(configuration)
    return {
        /**
         * Get list of exercises
         * @param {number} [offset] Offset for exercise list pagination
         * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
         * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
         * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercises(offset?: number, limit?: number, sortMethod?: 'bodyPart' | 'equipment' | 'id' | 'name' | 'target', sortOrder?: 'ascending' | 'descending', options?: any): AxiosPromise<Array<Exercise>> {
            return localVarFp.getExercises(offset, limit, sortMethod, sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of exercises by body part
         * @param {'back' | 'cardio' | 'chest' | 'lower arms' | 'lower legs' | 'neck' | 'shoulders' | 'upper arms' | 'upper legs' | 'waist'} bodyPart Body part
         * @param {number} [offset] Offset for exercise list pagination
         * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
         * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
         * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesBodyPartByBodyPart(bodyPart: 'back' | 'cardio' | 'chest' | 'lower arms' | 'lower legs' | 'neck' | 'shoulders' | 'upper arms' | 'upper legs' | 'waist', offset?: number, limit?: number, sortMethod?: 'bodyPart' | 'equipment' | 'id' | 'name' | 'target', sortOrder?: 'ascending' | 'descending', options?: any): AxiosPromise<Array<Exercise>> {
            return localVarFp.getExercisesBodyPartByBodyPart(bodyPart, offset, limit, sortMethod, sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * Get list of available body parts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesBodyPartList(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.getExercisesBodyPartList(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of exercises by equipment
         * @param {'assisted' | 'band' | 'barbell' | 'body weight' | 'bosu ball' | 'cable' | 'dumbbell' | 'elliptical machine' | 'ez barbell' | 'hammer' | 'kettlebell' | 'leverage machine' | 'medicine ball' | 'olympic barbell' | 'resistance band' | 'roller' | 'rope' | 'skierg machine' | 'sled machine' | 'smith machine' | 'stability ball' | 'stationary bike' | 'stepmill machine' | 'tire' | 'trap bar' | 'upper body ergometer' | 'weighted' | 'wheel roller'} equipment Equipment type
         * @param {number} [offset] Offset for exercise list pagination
         * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
         * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
         * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesEquipmentByEquipment(equipment: 'assisted' | 'band' | 'barbell' | 'body weight' | 'bosu ball' | 'cable' | 'dumbbell' | 'elliptical machine' | 'ez barbell' | 'hammer' | 'kettlebell' | 'leverage machine' | 'medicine ball' | 'olympic barbell' | 'resistance band' | 'roller' | 'rope' | 'skierg machine' | 'sled machine' | 'smith machine' | 'stability ball' | 'stationary bike' | 'stepmill machine' | 'tire' | 'trap bar' | 'upper body ergometer' | 'weighted' | 'wheel roller', offset?: number, limit?: number, sortMethod?: 'bodyPart' | 'equipment' | 'id' | 'name' | 'target', sortOrder?: 'ascending' | 'descending', options?: any): AxiosPromise<Array<Exercise>> {
            return localVarFp.getExercisesEquipmentByEquipment(equipment, offset, limit, sortMethod, sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * Get list of available equipment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesEquipmentList(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.getExercisesEquipmentList(options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single exercise by its ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesExerciseById(id: string, options?: any): AxiosPromise<Exercise> {
            return localVarFp.getExercisesExerciseById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get list of exercises by name
         * @param {string} name 
         * @param {number} [offset] Offset for exercise list pagination
         * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
         * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
         * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesNameByName(name: string, offset?: number, limit?: number, sortMethod?: 'bodyPart' | 'equipment' | 'id' | 'name' | 'target', sortOrder?: 'ascending' | 'descending', options?: any): AxiosPromise<Array<Exercise>> {
            return localVarFp.getExercisesNameByName(name, offset, limit, sortMethod, sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * Get list of exercises by target muscle
         * @param {'abductors' | 'abs' | 'adductors' | 'biceps' | 'calves' | 'cardiovascular system' | 'delts' | 'forearms' | 'glutes' | 'hamstrings' | 'lats' | 'levator scapulae' | 'pectorals' | 'quads' | 'serratus anterior' | 'spine' | 'traps' | 'triceps' | 'upper back'} target Target muscle
         * @param {number} [offset] Offset for exercise list pagination
         * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
         * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
         * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesTargetByTarget(target: 'abductors' | 'abs' | 'adductors' | 'biceps' | 'calves' | 'cardiovascular system' | 'delts' | 'forearms' | 'glutes' | 'hamstrings' | 'lats' | 'levator scapulae' | 'pectorals' | 'quads' | 'serratus anterior' | 'spine' | 'traps' | 'triceps' | 'upper back', offset?: number, limit?: number, sortMethod?: 'bodyPart' | 'equipment' | 'id' | 'name' | 'target', sortOrder?: 'ascending' | 'descending', options?: any): AxiosPromise<Array<Exercise>> {
            return localVarFp.getExercisesTargetByTarget(target, offset, limit, sortMethod, sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * Get list of available target muscles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesTargetList(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.getExercisesTargetList(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExercisesApi - object-oriented interface
 * @export
 * @class ExercisesApi
 * @extends {BaseAPI}
 */
export class ExercisesApi extends BaseAPI {
    /**
     * Get list of exercises
     * @param {number} [offset] Offset for exercise list pagination
     * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
     * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
     * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    public getExercises(offset?: number, limit?: number, sortMethod?: 'bodyPart' | 'equipment' | 'id' | 'name' | 'target', sortOrder?: 'ascending' | 'descending', options?: AxiosRequestConfig) {
        return ExercisesApiFp(this.configuration).getExercises(offset, limit, sortMethod, sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of exercises by body part
     * @param {'back' | 'cardio' | 'chest' | 'lower arms' | 'lower legs' | 'neck' | 'shoulders' | 'upper arms' | 'upper legs' | 'waist'} bodyPart Body part
     * @param {number} [offset] Offset for exercise list pagination
     * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
     * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
     * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    public getExercisesBodyPartByBodyPart(bodyPart: 'back' | 'cardio' | 'chest' | 'lower arms' | 'lower legs' | 'neck' | 'shoulders' | 'upper arms' | 'upper legs' | 'waist', offset?: number, limit?: number, sortMethod?: 'bodyPart' | 'equipment' | 'id' | 'name' | 'target', sortOrder?: 'ascending' | 'descending', options?: AxiosRequestConfig) {
        return ExercisesApiFp(this.configuration).getExercisesBodyPartByBodyPart(bodyPart, offset, limit, sortMethod, sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get list of available body parts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    public getExercisesBodyPartList(options?: AxiosRequestConfig) {
        return ExercisesApiFp(this.configuration).getExercisesBodyPartList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of exercises by equipment
     * @param {'assisted' | 'band' | 'barbell' | 'body weight' | 'bosu ball' | 'cable' | 'dumbbell' | 'elliptical machine' | 'ez barbell' | 'hammer' | 'kettlebell' | 'leverage machine' | 'medicine ball' | 'olympic barbell' | 'resistance band' | 'roller' | 'rope' | 'skierg machine' | 'sled machine' | 'smith machine' | 'stability ball' | 'stationary bike' | 'stepmill machine' | 'tire' | 'trap bar' | 'upper body ergometer' | 'weighted' | 'wheel roller'} equipment Equipment type
     * @param {number} [offset] Offset for exercise list pagination
     * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
     * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
     * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    public getExercisesEquipmentByEquipment(equipment: 'assisted' | 'band' | 'barbell' | 'body weight' | 'bosu ball' | 'cable' | 'dumbbell' | 'elliptical machine' | 'ez barbell' | 'hammer' | 'kettlebell' | 'leverage machine' | 'medicine ball' | 'olympic barbell' | 'resistance band' | 'roller' | 'rope' | 'skierg machine' | 'sled machine' | 'smith machine' | 'stability ball' | 'stationary bike' | 'stepmill machine' | 'tire' | 'trap bar' | 'upper body ergometer' | 'weighted' | 'wheel roller', offset?: number, limit?: number, sortMethod?: 'bodyPart' | 'equipment' | 'id' | 'name' | 'target', sortOrder?: 'ascending' | 'descending', options?: AxiosRequestConfig) {
        return ExercisesApiFp(this.configuration).getExercisesEquipmentByEquipment(equipment, offset, limit, sortMethod, sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get list of available equipment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    public getExercisesEquipmentList(options?: AxiosRequestConfig) {
        return ExercisesApiFp(this.configuration).getExercisesEquipmentList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a single exercise by its ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    public getExercisesExerciseById(id: string, options?: AxiosRequestConfig) {
        return ExercisesApiFp(this.configuration).getExercisesExerciseById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get list of exercises by name
     * @param {string} name 
     * @param {number} [offset] Offset for exercise list pagination
     * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
     * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
     * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    public getExercisesNameByName(name: string, offset?: number, limit?: number, sortMethod?: 'bodyPart' | 'equipment' | 'id' | 'name' | 'target', sortOrder?: 'ascending' | 'descending', options?: AxiosRequestConfig) {
        return ExercisesApiFp(this.configuration).getExercisesNameByName(name, offset, limit, sortMethod, sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get list of exercises by target muscle
     * @param {'abductors' | 'abs' | 'adductors' | 'biceps' | 'calves' | 'cardiovascular system' | 'delts' | 'forearms' | 'glutes' | 'hamstrings' | 'lats' | 'levator scapulae' | 'pectorals' | 'quads' | 'serratus anterior' | 'spine' | 'traps' | 'triceps' | 'upper back'} target Target muscle
     * @param {number} [offset] Offset for exercise list pagination
     * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
     * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
     * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    public getExercisesTargetByTarget(target: 'abductors' | 'abs' | 'adductors' | 'biceps' | 'calves' | 'cardiovascular system' | 'delts' | 'forearms' | 'glutes' | 'hamstrings' | 'lats' | 'levator scapulae' | 'pectorals' | 'quads' | 'serratus anterior' | 'spine' | 'traps' | 'triceps' | 'upper back', offset?: number, limit?: number, sortMethod?: 'bodyPart' | 'equipment' | 'id' | 'name' | 'target', sortOrder?: 'ascending' | 'descending', options?: AxiosRequestConfig) {
        return ExercisesApiFp(this.configuration).getExercisesTargetByTarget(target, offset, limit, sortMethod, sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get list of available target muscles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    public getExercisesTargetList(options?: AxiosRequestConfig) {
        return ExercisesApiFp(this.configuration).getExercisesTargetList(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MiscApi - axios parameter creator
 * @export
 */
export const MiscApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve an exercise gif from the exercise ID
         * @param {string} id The ID of the exercise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getImageById', 'id', id)
            const localVarPath = `/image/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the status of the ExerciseDB Server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MiscApi - functional programming interface
 * @export
 */
export const MiscApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MiscApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve an exercise gif from the exercise ID
         * @param {string} id The ID of the exercise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImageById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the status of the ExerciseDB Server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStatus(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStatus(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MiscApi - factory interface
 * @export
 */
export const MiscApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MiscApiFp(configuration)
    return {
        /**
         * Retrieve an exercise gif from the exercise ID
         * @param {string} id The ID of the exercise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageById(id: string, options?: any): AxiosPromise<File> {
            return localVarFp.getImageById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the status of the ExerciseDB Server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus(options?: any): AxiosPromise<void> {
            return localVarFp.getStatus(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MiscApi - object-oriented interface
 * @export
 * @class MiscApi
 * @extends {BaseAPI}
 */
export class MiscApi extends BaseAPI {
    /**
     * Retrieve an exercise gif from the exercise ID
     * @param {string} id The ID of the exercise
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MiscApi
     */
    public getImageById(id: string, options?: AxiosRequestConfig) {
        return MiscApiFp(this.configuration).getImageById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the status of the ExerciseDB Server
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MiscApi
     */
    public getStatus(options?: AxiosRequestConfig) {
        return MiscApiFp(this.configuration).getStatus(options).then((request) => request(this.axios, this.basePath));
    }
}


