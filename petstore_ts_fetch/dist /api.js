"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * ExerciseDB Documentation
 * API documentation app for [ExerciseDB on RapidAPI](https://rapidapi.com/justin-WFnsXH_t6/api/exercisedb)
 *
 * The version of the OpenAPI document: 2.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MiscApi = exports.MiscApiFactory = exports.MiscApiFp = exports.MiscApiAxiosParamCreator = exports.ExercisesApi = exports.ExercisesApiFactory = exports.ExercisesApiFp = exports.ExercisesApiAxiosParamCreator = exports.NotFoundErrorMessageEnum = exports.NotFoundErrorCodeEnum = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
exports.NotFoundErrorCodeEnum = {
    NotFound: 'NOT_FOUND'
};
exports.NotFoundErrorMessageEnum = {
    ExerciseNotFound: 'Exercise not found'
};
/**
 * ExercisesApi - axios parameter creator
 * @export
 */
const ExercisesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get list of exercises
         * @param {number} [offset] Offset for exercise list pagination
         * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
         * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
         * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercises: (offset_1, limit_1, sortMethod_1, sortOrder_1, ...args_1) => __awaiter(this, [offset_1, limit_1, sortMethod_1, sortOrder_1, ...args_1], void 0, function* (offset, limit, sortMethod, sortOrder, options = {}) {
            const localVarPath = `/exercises`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (sortMethod !== undefined) {
                localVarQueryParameter['sortMethod'] = sortMethod;
            }
            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve a list of exercises by body part
         * @param {'back' | 'cardio' | 'chest' | 'lower arms' | 'lower legs' | 'neck' | 'shoulders' | 'upper arms' | 'upper legs' | 'waist'} bodyPart Body part
         * @param {number} [offset] Offset for exercise list pagination
         * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
         * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
         * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesBodyPartByBodyPart: (bodyPart_1, offset_1, limit_1, sortMethod_1, sortOrder_1, ...args_1) => __awaiter(this, [bodyPart_1, offset_1, limit_1, sortMethod_1, sortOrder_1, ...args_1], void 0, function* (bodyPart, offset, limit, sortMethod, sortOrder, options = {}) {
            // verify required parameter 'bodyPart' is not null or undefined
            (0, common_1.assertParamExists)('getExercisesBodyPartByBodyPart', 'bodyPart', bodyPart);
            const localVarPath = `/exercises/bodyPart/{bodyPart}`
                .replace(`{${"bodyPart"}}`, encodeURIComponent(String(bodyPart)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (sortMethod !== undefined) {
                localVarQueryParameter['sortMethod'] = sortMethod;
            }
            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get list of available body parts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesBodyPartList: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/exercises/bodyPartList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve a list of exercises by equipment
         * @param {'assisted' | 'band' | 'barbell' | 'body weight' | 'bosu ball' | 'cable' | 'dumbbell' | 'elliptical machine' | 'ez barbell' | 'hammer' | 'kettlebell' | 'leverage machine' | 'medicine ball' | 'olympic barbell' | 'resistance band' | 'roller' | 'rope' | 'skierg machine' | 'sled machine' | 'smith machine' | 'stability ball' | 'stationary bike' | 'stepmill machine' | 'tire' | 'trap bar' | 'upper body ergometer' | 'weighted' | 'wheel roller'} equipment Equipment type
         * @param {number} [offset] Offset for exercise list pagination
         * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
         * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
         * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesEquipmentByEquipment: (equipment_1, offset_1, limit_1, sortMethod_1, sortOrder_1, ...args_1) => __awaiter(this, [equipment_1, offset_1, limit_1, sortMethod_1, sortOrder_1, ...args_1], void 0, function* (equipment, offset, limit, sortMethod, sortOrder, options = {}) {
            // verify required parameter 'equipment' is not null or undefined
            (0, common_1.assertParamExists)('getExercisesEquipmentByEquipment', 'equipment', equipment);
            const localVarPath = `/exercises/equipment/{equipment}`
                .replace(`{${"equipment"}}`, encodeURIComponent(String(equipment)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (sortMethod !== undefined) {
                localVarQueryParameter['sortMethod'] = sortMethod;
            }
            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get list of available equipment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesEquipmentList: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/exercises/equipmentList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a single exercise by its ID
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesExerciseById: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getExercisesExerciseById', 'id', id);
            const localVarPath = `/exercises/exercise/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get list of exercises by name
         * @param {string} name
         * @param {number} [offset] Offset for exercise list pagination
         * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
         * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
         * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesNameByName: (name_1, offset_1, limit_1, sortMethod_1, sortOrder_1, ...args_1) => __awaiter(this, [name_1, offset_1, limit_1, sortMethod_1, sortOrder_1, ...args_1], void 0, function* (name, offset, limit, sortMethod, sortOrder, options = {}) {
            // verify required parameter 'name' is not null or undefined
            (0, common_1.assertParamExists)('getExercisesNameByName', 'name', name);
            const localVarPath = `/exercises/name/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (sortMethod !== undefined) {
                localVarQueryParameter['sortMethod'] = sortMethod;
            }
            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get list of exercises by target muscle
         * @param {'abductors' | 'abs' | 'adductors' | 'biceps' | 'calves' | 'cardiovascular system' | 'delts' | 'forearms' | 'glutes' | 'hamstrings' | 'lats' | 'levator scapulae' | 'pectorals' | 'quads' | 'serratus anterior' | 'spine' | 'traps' | 'triceps' | 'upper back'} target Target muscle
         * @param {number} [offset] Offset for exercise list pagination
         * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
         * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
         * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesTargetByTarget: (target_1, offset_1, limit_1, sortMethod_1, sortOrder_1, ...args_1) => __awaiter(this, [target_1, offset_1, limit_1, sortMethod_1, sortOrder_1, ...args_1], void 0, function* (target, offset, limit, sortMethod, sortOrder, options = {}) {
            // verify required parameter 'target' is not null or undefined
            (0, common_1.assertParamExists)('getExercisesTargetByTarget', 'target', target);
            const localVarPath = `/exercises/target/{target}`
                .replace(`{${"target"}}`, encodeURIComponent(String(target)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (sortMethod !== undefined) {
                localVarQueryParameter['sortMethod'] = sortMethod;
            }
            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get list of available target muscles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesTargetList: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/exercises/targetList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ExercisesApiAxiosParamCreator = ExercisesApiAxiosParamCreator;
/**
 * ExercisesApi - functional programming interface
 * @export
 */
const ExercisesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ExercisesApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get list of exercises
         * @param {number} [offset] Offset for exercise list pagination
         * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
         * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
         * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercises(offset, limit, sortMethod, sortOrder, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getExercises(offset, limit, sortMethod, sortOrder, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Retrieve a list of exercises by body part
         * @param {'back' | 'cardio' | 'chest' | 'lower arms' | 'lower legs' | 'neck' | 'shoulders' | 'upper arms' | 'upper legs' | 'waist'} bodyPart Body part
         * @param {number} [offset] Offset for exercise list pagination
         * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
         * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
         * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesBodyPartByBodyPart(bodyPart, offset, limit, sortMethod, sortOrder, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getExercisesBodyPartByBodyPart(bodyPart, offset, limit, sortMethod, sortOrder, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get list of available body parts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesBodyPartList(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getExercisesBodyPartList(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Retrieve a list of exercises by equipment
         * @param {'assisted' | 'band' | 'barbell' | 'body weight' | 'bosu ball' | 'cable' | 'dumbbell' | 'elliptical machine' | 'ez barbell' | 'hammer' | 'kettlebell' | 'leverage machine' | 'medicine ball' | 'olympic barbell' | 'resistance band' | 'roller' | 'rope' | 'skierg machine' | 'sled machine' | 'smith machine' | 'stability ball' | 'stationary bike' | 'stepmill machine' | 'tire' | 'trap bar' | 'upper body ergometer' | 'weighted' | 'wheel roller'} equipment Equipment type
         * @param {number} [offset] Offset for exercise list pagination
         * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
         * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
         * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesEquipmentByEquipment(equipment, offset, limit, sortMethod, sortOrder, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getExercisesEquipmentByEquipment(equipment, offset, limit, sortMethod, sortOrder, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get list of available equipment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesEquipmentList(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getExercisesEquipmentList(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get a single exercise by its ID
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesExerciseById(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getExercisesExerciseById(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get list of exercises by name
         * @param {string} name
         * @param {number} [offset] Offset for exercise list pagination
         * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
         * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
         * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesNameByName(name, offset, limit, sortMethod, sortOrder, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getExercisesNameByName(name, offset, limit, sortMethod, sortOrder, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get list of exercises by target muscle
         * @param {'abductors' | 'abs' | 'adductors' | 'biceps' | 'calves' | 'cardiovascular system' | 'delts' | 'forearms' | 'glutes' | 'hamstrings' | 'lats' | 'levator scapulae' | 'pectorals' | 'quads' | 'serratus anterior' | 'spine' | 'traps' | 'triceps' | 'upper back'} target Target muscle
         * @param {number} [offset] Offset for exercise list pagination
         * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
         * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
         * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesTargetByTarget(target, offset, limit, sortMethod, sortOrder, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getExercisesTargetByTarget(target, offset, limit, sortMethod, sortOrder, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get list of available target muscles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesTargetList(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getExercisesTargetList(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ExercisesApiFp = ExercisesApiFp;
/**
 * ExercisesApi - factory interface
 * @export
 */
const ExercisesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ExercisesApiFp)(configuration);
    return {
        /**
         * Get list of exercises
         * @param {number} [offset] Offset for exercise list pagination
         * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
         * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
         * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercises(offset, limit, sortMethod, sortOrder, options) {
            return localVarFp.getExercises(offset, limit, sortMethod, sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of exercises by body part
         * @param {'back' | 'cardio' | 'chest' | 'lower arms' | 'lower legs' | 'neck' | 'shoulders' | 'upper arms' | 'upper legs' | 'waist'} bodyPart Body part
         * @param {number} [offset] Offset for exercise list pagination
         * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
         * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
         * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesBodyPartByBodyPart(bodyPart, offset, limit, sortMethod, sortOrder, options) {
            return localVarFp.getExercisesBodyPartByBodyPart(bodyPart, offset, limit, sortMethod, sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * Get list of available body parts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesBodyPartList(options) {
            return localVarFp.getExercisesBodyPartList(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of exercises by equipment
         * @param {'assisted' | 'band' | 'barbell' | 'body weight' | 'bosu ball' | 'cable' | 'dumbbell' | 'elliptical machine' | 'ez barbell' | 'hammer' | 'kettlebell' | 'leverage machine' | 'medicine ball' | 'olympic barbell' | 'resistance band' | 'roller' | 'rope' | 'skierg machine' | 'sled machine' | 'smith machine' | 'stability ball' | 'stationary bike' | 'stepmill machine' | 'tire' | 'trap bar' | 'upper body ergometer' | 'weighted' | 'wheel roller'} equipment Equipment type
         * @param {number} [offset] Offset for exercise list pagination
         * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
         * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
         * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesEquipmentByEquipment(equipment, offset, limit, sortMethod, sortOrder, options) {
            return localVarFp.getExercisesEquipmentByEquipment(equipment, offset, limit, sortMethod, sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * Get list of available equipment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesEquipmentList(options) {
            return localVarFp.getExercisesEquipmentList(options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single exercise by its ID
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesExerciseById(id, options) {
            return localVarFp.getExercisesExerciseById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get list of exercises by name
         * @param {string} name
         * @param {number} [offset] Offset for exercise list pagination
         * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
         * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
         * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesNameByName(name, offset, limit, sortMethod, sortOrder, options) {
            return localVarFp.getExercisesNameByName(name, offset, limit, sortMethod, sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * Get list of exercises by target muscle
         * @param {'abductors' | 'abs' | 'adductors' | 'biceps' | 'calves' | 'cardiovascular system' | 'delts' | 'forearms' | 'glutes' | 'hamstrings' | 'lats' | 'levator scapulae' | 'pectorals' | 'quads' | 'serratus anterior' | 'spine' | 'traps' | 'triceps' | 'upper back'} target Target muscle
         * @param {number} [offset] Offset for exercise list pagination
         * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
         * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
         * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesTargetByTarget(target, offset, limit, sortMethod, sortOrder, options) {
            return localVarFp.getExercisesTargetByTarget(target, offset, limit, sortMethod, sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * Get list of available target muscles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesTargetList(options) {
            return localVarFp.getExercisesTargetList(options).then((request) => request(axios, basePath));
        },
    };
};
exports.ExercisesApiFactory = ExercisesApiFactory;
/**
 * ExercisesApi - object-oriented interface
 * @export
 * @class ExercisesApi
 * @extends {BaseAPI}
 */
class ExercisesApi extends base_1.BaseAPI {
    /**
     * Get list of exercises
     * @param {number} [offset] Offset for exercise list pagination
     * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
     * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
     * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    getExercises(offset, limit, sortMethod, sortOrder, options) {
        return (0, exports.ExercisesApiFp)(this.configuration).getExercises(offset, limit, sortMethod, sortOrder, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a list of exercises by body part
     * @param {'back' | 'cardio' | 'chest' | 'lower arms' | 'lower legs' | 'neck' | 'shoulders' | 'upper arms' | 'upper legs' | 'waist'} bodyPart Body part
     * @param {number} [offset] Offset for exercise list pagination
     * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
     * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
     * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    getExercisesBodyPartByBodyPart(bodyPart, offset, limit, sortMethod, sortOrder, options) {
        return (0, exports.ExercisesApiFp)(this.configuration).getExercisesBodyPartByBodyPart(bodyPart, offset, limit, sortMethod, sortOrder, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get list of available body parts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    getExercisesBodyPartList(options) {
        return (0, exports.ExercisesApiFp)(this.configuration).getExercisesBodyPartList(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a list of exercises by equipment
     * @param {'assisted' | 'band' | 'barbell' | 'body weight' | 'bosu ball' | 'cable' | 'dumbbell' | 'elliptical machine' | 'ez barbell' | 'hammer' | 'kettlebell' | 'leverage machine' | 'medicine ball' | 'olympic barbell' | 'resistance band' | 'roller' | 'rope' | 'skierg machine' | 'sled machine' | 'smith machine' | 'stability ball' | 'stationary bike' | 'stepmill machine' | 'tire' | 'trap bar' | 'upper body ergometer' | 'weighted' | 'wheel roller'} equipment Equipment type
     * @param {number} [offset] Offset for exercise list pagination
     * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
     * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
     * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    getExercisesEquipmentByEquipment(equipment, offset, limit, sortMethod, sortOrder, options) {
        return (0, exports.ExercisesApiFp)(this.configuration).getExercisesEquipmentByEquipment(equipment, offset, limit, sortMethod, sortOrder, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get list of available equipment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    getExercisesEquipmentList(options) {
        return (0, exports.ExercisesApiFp)(this.configuration).getExercisesEquipmentList(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a single exercise by its ID
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    getExercisesExerciseById(id, options) {
        return (0, exports.ExercisesApiFp)(this.configuration).getExercisesExerciseById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get list of exercises by name
     * @param {string} name
     * @param {number} [offset] Offset for exercise list pagination
     * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
     * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
     * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    getExercisesNameByName(name, offset, limit, sortMethod, sortOrder, options) {
        return (0, exports.ExercisesApiFp)(this.configuration).getExercisesNameByName(name, offset, limit, sortMethod, sortOrder, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get list of exercises by target muscle
     * @param {'abductors' | 'abs' | 'adductors' | 'biceps' | 'calves' | 'cardiovascular system' | 'delts' | 'forearms' | 'glutes' | 'hamstrings' | 'lats' | 'levator scapulae' | 'pectorals' | 'quads' | 'serratus anterior' | 'spine' | 'traps' | 'triceps' | 'upper back'} target Target muscle
     * @param {number} [offset] Offset for exercise list pagination
     * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
     * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
     * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    getExercisesTargetByTarget(target, offset, limit, sortMethod, sortOrder, options) {
        return (0, exports.ExercisesApiFp)(this.configuration).getExercisesTargetByTarget(target, offset, limit, sortMethod, sortOrder, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get list of available target muscles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    getExercisesTargetList(options) {
        return (0, exports.ExercisesApiFp)(this.configuration).getExercisesTargetList(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ExercisesApi = ExercisesApi;
/**
 * MiscApi - axios parameter creator
 * @export
 */
const MiscApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Retrieve an exercise gif from the exercise ID
         * @param {string} id The ID of the exercise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageById: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getImageById', 'id', id);
            const localVarPath = `/image/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the status of the ExerciseDB Server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.MiscApiAxiosParamCreator = MiscApiAxiosParamCreator;
/**
 * MiscApi - functional programming interface
 * @export
 */
const MiscApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.MiscApiAxiosParamCreator)(configuration);
    return {
        /**
         * Retrieve an exercise gif from the exercise ID
         * @param {string} id The ID of the exercise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageById(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getImageById(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get the status of the ExerciseDB Server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getStatus(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.MiscApiFp = MiscApiFp;
/**
 * MiscApi - factory interface
 * @export
 */
const MiscApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.MiscApiFp)(configuration);
    return {
        /**
         * Retrieve an exercise gif from the exercise ID
         * @param {string} id The ID of the exercise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageById(id, options) {
            return localVarFp.getImageById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the status of the ExerciseDB Server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus(options) {
            return localVarFp.getStatus(options).then((request) => request(axios, basePath));
        },
    };
};
exports.MiscApiFactory = MiscApiFactory;
/**
 * MiscApi - object-oriented interface
 * @export
 * @class MiscApi
 * @extends {BaseAPI}
 */
class MiscApi extends base_1.BaseAPI {
    /**
     * Retrieve an exercise gif from the exercise ID
     * @param {string} id The ID of the exercise
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MiscApi
     */
    getImageById(id, options) {
        return (0, exports.MiscApiFp)(this.configuration).getImageById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the status of the ExerciseDB Server
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MiscApi
     */
    getStatus(options) {
        return (0, exports.MiscApiFp)(this.configuration).getStatus(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.MiscApi = MiscApi;
