/**
 * ExerciseDB Documentation
 * API documentation app for [ExerciseDB on RapidAPI](https://rapidapi.com/justin-WFnsXH_t6/api/exercisedb)
 *
 * The version of the OpenAPI document: 2.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from "./configuration";
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import { RequestArgs, BaseAPI } from "./base";
/**
 *
 * @export
 * @interface Exercise
 */
export interface Exercise {
    /**
     *
     * @type {string}
     * @memberof Exercise
     */
    bodyPart: string;
    /**
     *
     * @type {string}
     * @memberof Exercise
     */
    equipment: string;
    /**
     *
     * @type {string}
     * @memberof Exercise
     */
    gifUrl: string;
    /**
     *
     * @type {string}
     * @memberof Exercise
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof Exercise
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof Exercise
     */
    target: string;
    /**
     *
     * @type {Array<string>}
     * @memberof Exercise
     */
    secondaryMuscles: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof Exercise
     */
    instructions: Array<string>;
}
/**
 *
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     *
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     *
     * @type {string}
     * @memberof ModelError
     */
    message: string;
}
/**
 *
 * @export
 * @interface NotFoundError
 */
export interface NotFoundError {
    /**
     *
     * @type {string}
     * @memberof NotFoundError
     */
    code: NotFoundErrorCodeEnum;
    /**
     *
     * @type {string}
     * @memberof NotFoundError
     */
    message: NotFoundErrorMessageEnum;
}
export declare const NotFoundErrorCodeEnum: {
    readonly NotFound: "NOT_FOUND";
};
export type NotFoundErrorCodeEnum = (typeof NotFoundErrorCodeEnum)[keyof typeof NotFoundErrorCodeEnum];
export declare const NotFoundErrorMessageEnum: {
    readonly ExerciseNotFound: "Exercise not found";
};
export type NotFoundErrorMessageEnum = (typeof NotFoundErrorMessageEnum)[keyof typeof NotFoundErrorMessageEnum];
/**
 * ExercisesApi - axios parameter creator
 * @export
 */
export declare const ExercisesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get list of exercises
     * @param {number} [offset] Offset for exercise list pagination
     * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
     * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
     * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExercises: (offset?: number, limit?: number, sortMethod?: "bodyPart" | "equipment" | "id" | "name" | "target", sortOrder?: "ascending" | "descending", options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve a list of exercises by body part
     * @param {'back' | 'cardio' | 'chest' | 'lower arms' | 'lower legs' | 'neck' | 'shoulders' | 'upper arms' | 'upper legs' | 'waist'} bodyPart Body part
     * @param {number} [offset] Offset for exercise list pagination
     * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
     * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
     * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExercisesBodyPartByBodyPart: (bodyPart: "back" | "cardio" | "chest" | "lower arms" | "lower legs" | "neck" | "shoulders" | "upper arms" | "upper legs" | "waist", offset?: number, limit?: number, sortMethod?: "bodyPart" | "equipment" | "id" | "name" | "target", sortOrder?: "ascending" | "descending", options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get list of available body parts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExercisesBodyPartList: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve a list of exercises by equipment
     * @param {'assisted' | 'band' | 'barbell' | 'body weight' | 'bosu ball' | 'cable' | 'dumbbell' | 'elliptical machine' | 'ez barbell' | 'hammer' | 'kettlebell' | 'leverage machine' | 'medicine ball' | 'olympic barbell' | 'resistance band' | 'roller' | 'rope' | 'skierg machine' | 'sled machine' | 'smith machine' | 'stability ball' | 'stationary bike' | 'stepmill machine' | 'tire' | 'trap bar' | 'upper body ergometer' | 'weighted' | 'wheel roller'} equipment Equipment type
     * @param {number} [offset] Offset for exercise list pagination
     * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
     * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
     * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExercisesEquipmentByEquipment: (equipment: "assisted" | "band" | "barbell" | "body weight" | "bosu ball" | "cable" | "dumbbell" | "elliptical machine" | "ez barbell" | "hammer" | "kettlebell" | "leverage machine" | "medicine ball" | "olympic barbell" | "resistance band" | "roller" | "rope" | "skierg machine" | "sled machine" | "smith machine" | "stability ball" | "stationary bike" | "stepmill machine" | "tire" | "trap bar" | "upper body ergometer" | "weighted" | "wheel roller", offset?: number, limit?: number, sortMethod?: "bodyPart" | "equipment" | "id" | "name" | "target", sortOrder?: "ascending" | "descending", options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get list of available equipment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExercisesEquipmentList: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a single exercise by its ID
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExercisesExerciseById: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get list of exercises by name
     * @param {string} name
     * @param {number} [offset] Offset for exercise list pagination
     * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
     * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
     * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExercisesNameByName: (name: string, offset?: number, limit?: number, sortMethod?: "bodyPart" | "equipment" | "id" | "name" | "target", sortOrder?: "ascending" | "descending", options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get list of exercises by target muscle
     * @param {'abductors' | 'abs' | 'adductors' | 'biceps' | 'calves' | 'cardiovascular system' | 'delts' | 'forearms' | 'glutes' | 'hamstrings' | 'lats' | 'levator scapulae' | 'pectorals' | 'quads' | 'serratus anterior' | 'spine' | 'traps' | 'triceps' | 'upper back'} target Target muscle
     * @param {number} [offset] Offset for exercise list pagination
     * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
     * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
     * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExercisesTargetByTarget: (target: "abductors" | "abs" | "adductors" | "biceps" | "calves" | "cardiovascular system" | "delts" | "forearms" | "glutes" | "hamstrings" | "lats" | "levator scapulae" | "pectorals" | "quads" | "serratus anterior" | "spine" | "traps" | "triceps" | "upper back", offset?: number, limit?: number, sortMethod?: "bodyPart" | "equipment" | "id" | "name" | "target", sortOrder?: "ascending" | "descending", options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get list of available target muscles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExercisesTargetList: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ExercisesApi - functional programming interface
 * @export
 */
export declare const ExercisesApiFp: (configuration?: Configuration) => {
    /**
     * Get list of exercises
     * @param {number} [offset] Offset for exercise list pagination
     * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
     * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
     * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExercises(offset?: number, limit?: number, sortMethod?: "bodyPart" | "equipment" | "id" | "name" | "target", sortOrder?: "ascending" | "descending", options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Exercise>>>;
    /**
     * Retrieve a list of exercises by body part
     * @param {'back' | 'cardio' | 'chest' | 'lower arms' | 'lower legs' | 'neck' | 'shoulders' | 'upper arms' | 'upper legs' | 'waist'} bodyPart Body part
     * @param {number} [offset] Offset for exercise list pagination
     * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
     * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
     * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExercisesBodyPartByBodyPart(bodyPart: "back" | "cardio" | "chest" | "lower arms" | "lower legs" | "neck" | "shoulders" | "upper arms" | "upper legs" | "waist", offset?: number, limit?: number, sortMethod?: "bodyPart" | "equipment" | "id" | "name" | "target", sortOrder?: "ascending" | "descending", options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Exercise>>>;
    /**
     * Get list of available body parts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExercisesBodyPartList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>>;
    /**
     * Retrieve a list of exercises by equipment
     * @param {'assisted' | 'band' | 'barbell' | 'body weight' | 'bosu ball' | 'cable' | 'dumbbell' | 'elliptical machine' | 'ez barbell' | 'hammer' | 'kettlebell' | 'leverage machine' | 'medicine ball' | 'olympic barbell' | 'resistance band' | 'roller' | 'rope' | 'skierg machine' | 'sled machine' | 'smith machine' | 'stability ball' | 'stationary bike' | 'stepmill machine' | 'tire' | 'trap bar' | 'upper body ergometer' | 'weighted' | 'wheel roller'} equipment Equipment type
     * @param {number} [offset] Offset for exercise list pagination
     * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
     * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
     * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExercisesEquipmentByEquipment(equipment: "assisted" | "band" | "barbell" | "body weight" | "bosu ball" | "cable" | "dumbbell" | "elliptical machine" | "ez barbell" | "hammer" | "kettlebell" | "leverage machine" | "medicine ball" | "olympic barbell" | "resistance band" | "roller" | "rope" | "skierg machine" | "sled machine" | "smith machine" | "stability ball" | "stationary bike" | "stepmill machine" | "tire" | "trap bar" | "upper body ergometer" | "weighted" | "wheel roller", offset?: number, limit?: number, sortMethod?: "bodyPart" | "equipment" | "id" | "name" | "target", sortOrder?: "ascending" | "descending", options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Exercise>>>;
    /**
     * Get list of available equipment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExercisesEquipmentList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>>;
    /**
     * Get a single exercise by its ID
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExercisesExerciseById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Exercise>>;
    /**
     * Get list of exercises by name
     * @param {string} name
     * @param {number} [offset] Offset for exercise list pagination
     * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
     * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
     * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExercisesNameByName(name: string, offset?: number, limit?: number, sortMethod?: "bodyPart" | "equipment" | "id" | "name" | "target", sortOrder?: "ascending" | "descending", options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Exercise>>>;
    /**
     * Get list of exercises by target muscle
     * @param {'abductors' | 'abs' | 'adductors' | 'biceps' | 'calves' | 'cardiovascular system' | 'delts' | 'forearms' | 'glutes' | 'hamstrings' | 'lats' | 'levator scapulae' | 'pectorals' | 'quads' | 'serratus anterior' | 'spine' | 'traps' | 'triceps' | 'upper back'} target Target muscle
     * @param {number} [offset] Offset for exercise list pagination
     * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
     * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
     * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExercisesTargetByTarget(target: "abductors" | "abs" | "adductors" | "biceps" | "calves" | "cardiovascular system" | "delts" | "forearms" | "glutes" | "hamstrings" | "lats" | "levator scapulae" | "pectorals" | "quads" | "serratus anterior" | "spine" | "traps" | "triceps" | "upper back", offset?: number, limit?: number, sortMethod?: "bodyPart" | "equipment" | "id" | "name" | "target", sortOrder?: "ascending" | "descending", options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Exercise>>>;
    /**
     * Get list of available target muscles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExercisesTargetList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>>;
};
/**
 * ExercisesApi - factory interface
 * @export
 */
export declare const ExercisesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get list of exercises
     * @param {number} [offset] Offset for exercise list pagination
     * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
     * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
     * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExercises(offset?: number, limit?: number, sortMethod?: "bodyPart" | "equipment" | "id" | "name" | "target", sortOrder?: "ascending" | "descending", options?: any): AxiosPromise<Array<Exercise>>;
    /**
     * Retrieve a list of exercises by body part
     * @param {'back' | 'cardio' | 'chest' | 'lower arms' | 'lower legs' | 'neck' | 'shoulders' | 'upper arms' | 'upper legs' | 'waist'} bodyPart Body part
     * @param {number} [offset] Offset for exercise list pagination
     * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
     * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
     * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExercisesBodyPartByBodyPart(bodyPart: "back" | "cardio" | "chest" | "lower arms" | "lower legs" | "neck" | "shoulders" | "upper arms" | "upper legs" | "waist", offset?: number, limit?: number, sortMethod?: "bodyPart" | "equipment" | "id" | "name" | "target", sortOrder?: "ascending" | "descending", options?: any): AxiosPromise<Array<Exercise>>;
    /**
     * Get list of available body parts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExercisesBodyPartList(options?: any): AxiosPromise<Array<string>>;
    /**
     * Retrieve a list of exercises by equipment
     * @param {'assisted' | 'band' | 'barbell' | 'body weight' | 'bosu ball' | 'cable' | 'dumbbell' | 'elliptical machine' | 'ez barbell' | 'hammer' | 'kettlebell' | 'leverage machine' | 'medicine ball' | 'olympic barbell' | 'resistance band' | 'roller' | 'rope' | 'skierg machine' | 'sled machine' | 'smith machine' | 'stability ball' | 'stationary bike' | 'stepmill machine' | 'tire' | 'trap bar' | 'upper body ergometer' | 'weighted' | 'wheel roller'} equipment Equipment type
     * @param {number} [offset] Offset for exercise list pagination
     * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
     * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
     * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExercisesEquipmentByEquipment(equipment: "assisted" | "band" | "barbell" | "body weight" | "bosu ball" | "cable" | "dumbbell" | "elliptical machine" | "ez barbell" | "hammer" | "kettlebell" | "leverage machine" | "medicine ball" | "olympic barbell" | "resistance band" | "roller" | "rope" | "skierg machine" | "sled machine" | "smith machine" | "stability ball" | "stationary bike" | "stepmill machine" | "tire" | "trap bar" | "upper body ergometer" | "weighted" | "wheel roller", offset?: number, limit?: number, sortMethod?: "bodyPart" | "equipment" | "id" | "name" | "target", sortOrder?: "ascending" | "descending", options?: any): AxiosPromise<Array<Exercise>>;
    /**
     * Get list of available equipment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExercisesEquipmentList(options?: any): AxiosPromise<Array<string>>;
    /**
     * Get a single exercise by its ID
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExercisesExerciseById(id: string, options?: any): AxiosPromise<Exercise>;
    /**
     * Get list of exercises by name
     * @param {string} name
     * @param {number} [offset] Offset for exercise list pagination
     * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
     * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
     * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExercisesNameByName(name: string, offset?: number, limit?: number, sortMethod?: "bodyPart" | "equipment" | "id" | "name" | "target", sortOrder?: "ascending" | "descending", options?: any): AxiosPromise<Array<Exercise>>;
    /**
     * Get list of exercises by target muscle
     * @param {'abductors' | 'abs' | 'adductors' | 'biceps' | 'calves' | 'cardiovascular system' | 'delts' | 'forearms' | 'glutes' | 'hamstrings' | 'lats' | 'levator scapulae' | 'pectorals' | 'quads' | 'serratus anterior' | 'spine' | 'traps' | 'triceps' | 'upper back'} target Target muscle
     * @param {number} [offset] Offset for exercise list pagination
     * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
     * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
     * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExercisesTargetByTarget(target: "abductors" | "abs" | "adductors" | "biceps" | "calves" | "cardiovascular system" | "delts" | "forearms" | "glutes" | "hamstrings" | "lats" | "levator scapulae" | "pectorals" | "quads" | "serratus anterior" | "spine" | "traps" | "triceps" | "upper back", offset?: number, limit?: number, sortMethod?: "bodyPart" | "equipment" | "id" | "name" | "target", sortOrder?: "ascending" | "descending", options?: any): AxiosPromise<Array<Exercise>>;
    /**
     * Get list of available target muscles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExercisesTargetList(options?: any): AxiosPromise<Array<string>>;
};
/**
 * ExercisesApi - object-oriented interface
 * @export
 * @class ExercisesApi
 * @extends {BaseAPI}
 */
export declare class ExercisesApi extends BaseAPI {
    /**
     * Get list of exercises
     * @param {number} [offset] Offset for exercise list pagination
     * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
     * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
     * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    getExercises(offset?: number, limit?: number, sortMethod?: "bodyPart" | "equipment" | "id" | "name" | "target", sortOrder?: "ascending" | "descending", options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Exercise[], any>>;
    /**
     * Retrieve a list of exercises by body part
     * @param {'back' | 'cardio' | 'chest' | 'lower arms' | 'lower legs' | 'neck' | 'shoulders' | 'upper arms' | 'upper legs' | 'waist'} bodyPart Body part
     * @param {number} [offset] Offset for exercise list pagination
     * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
     * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
     * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    getExercisesBodyPartByBodyPart(bodyPart: "back" | "cardio" | "chest" | "lower arms" | "lower legs" | "neck" | "shoulders" | "upper arms" | "upper legs" | "waist", offset?: number, limit?: number, sortMethod?: "bodyPart" | "equipment" | "id" | "name" | "target", sortOrder?: "ascending" | "descending", options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Exercise[], any>>;
    /**
     * Get list of available body parts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    getExercisesBodyPartList(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string[], any>>;
    /**
     * Retrieve a list of exercises by equipment
     * @param {'assisted' | 'band' | 'barbell' | 'body weight' | 'bosu ball' | 'cable' | 'dumbbell' | 'elliptical machine' | 'ez barbell' | 'hammer' | 'kettlebell' | 'leverage machine' | 'medicine ball' | 'olympic barbell' | 'resistance band' | 'roller' | 'rope' | 'skierg machine' | 'sled machine' | 'smith machine' | 'stability ball' | 'stationary bike' | 'stepmill machine' | 'tire' | 'trap bar' | 'upper body ergometer' | 'weighted' | 'wheel roller'} equipment Equipment type
     * @param {number} [offset] Offset for exercise list pagination
     * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
     * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
     * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    getExercisesEquipmentByEquipment(equipment: "assisted" | "band" | "barbell" | "body weight" | "bosu ball" | "cable" | "dumbbell" | "elliptical machine" | "ez barbell" | "hammer" | "kettlebell" | "leverage machine" | "medicine ball" | "olympic barbell" | "resistance band" | "roller" | "rope" | "skierg machine" | "sled machine" | "smith machine" | "stability ball" | "stationary bike" | "stepmill machine" | "tire" | "trap bar" | "upper body ergometer" | "weighted" | "wheel roller", offset?: number, limit?: number, sortMethod?: "bodyPart" | "equipment" | "id" | "name" | "target", sortOrder?: "ascending" | "descending", options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Exercise[], any>>;
    /**
     * Get list of available equipment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    getExercisesEquipmentList(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string[], any>>;
    /**
     * Get a single exercise by its ID
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    getExercisesExerciseById(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Exercise, any>>;
    /**
     * Get list of exercises by name
     * @param {string} name
     * @param {number} [offset] Offset for exercise list pagination
     * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
     * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
     * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    getExercisesNameByName(name: string, offset?: number, limit?: number, sortMethod?: "bodyPart" | "equipment" | "id" | "name" | "target", sortOrder?: "ascending" | "descending", options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Exercise[], any>>;
    /**
     * Get list of exercises by target muscle
     * @param {'abductors' | 'abs' | 'adductors' | 'biceps' | 'calves' | 'cardiovascular system' | 'delts' | 'forearms' | 'glutes' | 'hamstrings' | 'lats' | 'levator scapulae' | 'pectorals' | 'quads' | 'serratus anterior' | 'spine' | 'traps' | 'triceps' | 'upper back'} target Target muscle
     * @param {number} [offset] Offset for exercise list pagination
     * @param {number} [limit] Limit number of exercises included in the list. Set &#x60;limit&#x3D;0&#x60; to return full list
     * @param {'bodyPart' | 'equipment' | 'id' | 'name' | 'target'} [sortMethod] Sort exercise list by one of available fields
     * @param {'ascending' | 'descending'} [sortOrder] Sort order direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    getExercisesTargetByTarget(target: "abductors" | "abs" | "adductors" | "biceps" | "calves" | "cardiovascular system" | "delts" | "forearms" | "glutes" | "hamstrings" | "lats" | "levator scapulae" | "pectorals" | "quads" | "serratus anterior" | "spine" | "traps" | "triceps" | "upper back", offset?: number, limit?: number, sortMethod?: "bodyPart" | "equipment" | "id" | "name" | "target", sortOrder?: "ascending" | "descending", options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Exercise[], any>>;
    /**
     * Get list of available target muscles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    getExercisesTargetList(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string[], any>>;
}
/**
 * MiscApi - axios parameter creator
 * @export
 */
export declare const MiscApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Retrieve an exercise gif from the exercise ID
     * @param {string} id The ID of the exercise
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getImageById: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the status of the ExerciseDB Server
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStatus: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * MiscApi - functional programming interface
 * @export
 */
export declare const MiscApiFp: (configuration?: Configuration) => {
    /**
     * Retrieve an exercise gif from the exercise ID
     * @param {string} id The ID of the exercise
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getImageById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>>;
    /**
     * Get the status of the ExerciseDB Server
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStatus(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * MiscApi - factory interface
 * @export
 */
export declare const MiscApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Retrieve an exercise gif from the exercise ID
     * @param {string} id The ID of the exercise
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getImageById(id: string, options?: any): AxiosPromise<File>;
    /**
     * Get the status of the ExerciseDB Server
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStatus(options?: any): AxiosPromise<void>;
};
/**
 * MiscApi - object-oriented interface
 * @export
 * @class MiscApi
 * @extends {BaseAPI}
 */
export declare class MiscApi extends BaseAPI {
    /**
     * Retrieve an exercise gif from the exercise ID
     * @param {string} id The ID of the exercise
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MiscApi
     */
    getImageById(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<File, any>>;
    /**
     * Get the status of the ExerciseDB Server
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MiscApi
     */
    getStatus(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
//# sourceMappingURL=api.d.ts.map